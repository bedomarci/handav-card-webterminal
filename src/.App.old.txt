<template>
  <v-app>
    <app-bar v-on:dialog="dialog = $event"></app-bar>
    <v-main>
      <v-container>
        <settings-modal v-model="dialog"></settings-modal>
        <v-form ref="form" v-model="valid" id="the-form">
          <v-row>
            <v-expand-transition>
              <v-col
                cols="12"
                v-show="!isCardUniqueIdentifierValid"
                class="shrink"
              >
                <v-alert dense type="info">
                  {{ __.message.pleaseReadCard }}
                </v-alert>
              </v-col>
            </v-expand-transition>

            <v-col lg="10" md="8" sm="6" class="shrink">
              <text-field
                v-model="model.CardDetails.CardUniqueIdentifier"
                property="CardUniqueIdentifier"
                :disabled="isCardUniqueIdentifierValid"
              ></text-field>
            </v-col>

            <v-col lg="2" md="4" sm="6" class="align-center">
              <v-alert
                :icon="isCardUniqueIdentifierValid ? 'mdi-check' : 'mdi-close'"
                :type="isCardUniqueIdentifierValid ? 'success' : 'warning'"
              >
                {{
                  isCardUniqueIdentifierValid
                    ? __.common.valid
                    : __.common.invalid
                }}
              </v-alert>
            </v-col>

            <v-expand-transition>
              <v-col cols="12" v-show="isCardUniqueIdentifierValid">
                <text-field
                  v-model="model.CardDetails.ActorID"
                  property="ActorID"
                ></text-field>
                <text-field
                  v-model="model.CardDetails.CardDisplayNumber"
                  property="CardDisplayNumber"
                ></text-field>
                <select-field
                  v-model="model.CardDetails.CardTypeID"
                  property="CardTypeID"
                ></select-field>
                <select-field
                  v-model="model.CardDetails.PhysicalTypeID"
                  property="PhysicalTypeID"
                ></select-field>
                <text-field
                  v-model="model.CardDetails.Notes"
                  property="Notes"
                ></text-field>
                <select-field
                  v-model="model.CardDetails.Status"
                  property="Status"
                ></select-field>

                <text-field
                  v-model="model.CardHolderDetails.CardHolderName"
                  property="CardHolderName"
                ></text-field>
                <text-field
                  v-model="model.CardHolderDetails.UserIdentity"
                  property="UserIdentity"
                ></text-field>
                <text-field
                  v-model="model.CardHolderDetails.CountryID"
                  property="CountryID"
                ></text-field>
                <text-field
                  v-model="model.CardHolderDetails.MobileNumber"
                  property="MobileNumber"
                ></text-field>

                <select-field
                  v-model="model.CardCreditAttributes.CurrencyID"
                  property="CurrencyID"
                  :items="require('./assets/currencies.json')"
                ></select-field>
                <text-field
                  v-model="model.CardCreditAttributes.Credit"
                  property="Credit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditAttributes.RevalueCredit"
                  property="RevalueCredit"
                ></text-field>
                <switch-field
                  v-model="model.CardCreditAttributes.CreditTypeMoneyBit"
                  property="CreditTypeMoneyBit"
                ></switch-field>
                <switch-field
                  v-model="model.CardCreditAttributes.CreditAccumulateBit"
                  property="CreditAccumulateBit"
                ></switch-field>
                <switch-field
                  v-model="model.CardCreditAttributes.CreditSingleUseBit"
                  property="CreditSingleUseBit"
                ></switch-field>
                <switch-field
                  v-model="model.CardCreditAttributes.RevalueCashBit"
                  property="RevalueCashBit"
                ></switch-field>
                <switch-field
                  v-model="model.CardCreditAttributes.RevalueCreditCardBit"
                  property="RevalueCreditCardBit"
                ></switch-field>
                <text-field
                  v-model="model.CardCreditAttributes.AmountMonthlyReload"
                  property="AmountMonthlyReload"
                ></text-field>
                <text-field
                  v-model="model.CardCreditAttributes.TransactionsMonthlyReload"
                  property="TransactionsMonthlyReload"
                ></text-field>

                <text-field
                  v-model="model.CardCreditLimits.AmountDailyLimit"
                  property="AmountDailyLimit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditLimits.TransactionsDailyLimit"
                  property="TransactionsDailyLimit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditLimits.AmountMonthlyLimit"
                  property="AmountMonthlyLimit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditLimits.TransactionsMonthlyLimit"
                  property="TransactionsMonthlyLimit"
                ></text-field>
                <text-field
                  v-model="
                    model.CardCreditLimits.DiscountTransactionsTotalLimit
                  "
                  property="DiscountTransactionsTotalLimit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditLimits.MaxRevalueAmountLimit"
                  property="MaxRevalueAmountLimit"
                ></text-field>
                <switch-field
                  v-model="model.CardCreditLimits.WeekDayLimitEnabledBit"
                  property="WeekDayLimitEnabledBit"
                ></switch-field>
                <text-field
                  v-model="model.CardCreditLimits.WeekDayAmountLimit"
                  property="WeekDayAmountLimit"
                ></text-field>
                <text-field
                  v-model="model.CardCreditLimits.WeekDayTransactionLimit"
                  property="WeekDayTransactionLimit"
                ></text-field>

                <date-field
                  v-model="model.CardDateRules.ActivationDate"
                  property="ActivationDate"
                ></date-field>
                <date-field
                  v-model="model.CardDateRules.ExpirationDate"
                  property="ExpirationDate"
                ></date-field>
                <date-field
                  v-model="model.CardDateRules.RevalueExpirationDate"
                  property="RevalueExpirationDate"
                ></date-field>

                <switch-field
                  v-model="model.GroupLocationLimits[0].CardGroupEnabledBit"
                  property="CardGroupEnabledBit"
                ></switch-field>
                <text-field
                  v-model="model.GroupLocationLimits[0].GroupName"
                  property="GroupName"
                ></text-field>
                <text-field
                  v-model="model.GroupLocationLimits[0].CardGroupId"
                  property="CardGroupId"
                ></text-field>
                <text-field
                  v-model="model.GroupLocationLimits[0].GroupDailyLimit"
                  property="GroupDailyLimit"
                ></text-field>
              </v-col>
            </v-expand-transition>
          </v-row>
          <v-row>
            <v-col>
              <v-btn x-large color="warning" @click="resetForm">
                {{ __.message.resetForm }}
              </v-btn>
              <v-spacer></v-spacer>
            </v-col>
            <v-col class="text-right">
              <v-btn x-large color="success" class="" @click="submitForm">
                {{ __.common.submit }}
              </v-btn>
            </v-col>
          </v-row>
        </v-form>
        <v-snackbar
          v-model="snackbar"
          :timeout="this.$config.errorMessageTimeout"
        >
          {{ snackbarMessage }}
          <template v-slot:action="{ attrs }">
            <v-btn text v-bind="attrs" @click="snackbar = false">
              {{ __.common.close }}
            </v-btn>
          </template>
        </v-snackbar>
      </v-container>
    </v-main>
  </v-app>
</template>

<script>
import SettingsModal from './components/SettingsModal'
import TextField from './components/TextField'
import SelectField from './components/SelectField'
import SwitchField from './components/SwitchField'
import DateField from './components/DateField'
import AppBar from './components/AppBar'
import mixinAPIMethods from './mixins/mixinAPIMethods'
import { EventBus } from './plugins/event-bus.js'

export default {
  name: 'App',
  mixins: [mixinAPIMethods],
  components: {
    SettingsModal,
    TextField,
    SelectField,
    SwitchField,
    DateField,
    AppBar,
  },

  created() {
    if (this.hasAPICredentials) {
      this.restoreAndFetchToken()
    }
    this.fetchConfig()
  },
  mounted() {
    this.resetFormValidation()
  },
  methods: {
    fetchConfig() {
      if (!this.hasAllProperties) {
        this.dialog = true
      }
      this.$vuetify.theme.themes.light = this.$config.theme
    },

    resetForm() {
      EventBus.$emit('reset-form')
      this.resetFormValidation()
    },
    submitForm() {
      this.validateForm()
      if (this.valid) {
        console.log(this.model)
        this.postCard(this.model)
        //this.resetForm()
        //this.fetchToken()
      } else {
        this.$vuetify.goTo('#the-form')
      }
    },
    resetFormValidation() {
      this.$refs.form.resetValidation()
    },
    validateForm() {
      this.$refs.form.validate()
    },
  },

  computed: {
    __() {
      return this.$config.translation
    },
    hasAllProperties() {
      return (
        !!localStorage.username &&
        !!localStorage.password &&
        !!localStorage.configId
      )
    },
    hasAPICredentials() {
      return !!localStorage.username && !!localStorage.password
    },
    isCardUniqueIdentifierValid() {
      return (
        this.model.CardDetails.CardUniqueIdentifier.length >=
        this.$config.uniqueIdentifierLength
      )
    },
    isDetailFieldVisible() {
      return (
        !this.$config.hideDetailFieldsBeforeUniqueIdentifierIsValid ||
        this.isCardUniqueIdentifierValid
      )
    },
  },

  data: () => ({
    dialog: false,
    snackbarMessage: '',
    snackbar: false,
    model: require('./assets/api-create-card-model.json'),
    valid: false,
  }),
}
</script>
